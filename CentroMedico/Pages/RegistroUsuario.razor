@layout LoginLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime js

@page "/registro"

<div class="row justify-content-center">
    <div class="col-sm-4">
        <div class="card shadow">
            <div class="card-header font-weight-bold">
                Registro de usuario
            </div>
            <div class="card-body">
                <EditForm Model="@registroForm" OnValidSubmit="encargadoRegistro">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <h5 class="mb-0 text-dark">Datos de sesión</h5>
                    <hr class="mt-1" />
                    <div class="form-row">
                        <div class="form-group col">
                            <input type="text" class="form-control" @bind="registroForm.nombreUsuario" placeholder="Nombre de usuario">
                        </div>
                        <div class="form-group col">
                            <input type="password" class="form-control" @bind="registroForm.contrasena" placeholder="Contraseña">
                        </div>
                    </div>
                    <h5 class="mb-0 text-dark">Datos personales</h5>
                    <hr class="mt-1" />
                    <div class="form-group">
                        <input type="text" class="form-control" @bind="registroForm.nombre" placeholder="nombre">
                    </div>
                    <div class="form-row">
                        <div class="form-group col">
                            <input type="text" class="form-control" @bind="registroForm.apellidoPaterno" placeholder="Primer apellido">
                        </div>
                        <div class="form-group col">
                            <input type="text" class="form-control" @bind="registroForm.apellidoMaterno" placeholder="Segundo apellido">
                        </div>
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" @bind="registroForm.direccion" placeholder="Dirección">
                    </div>
                    <div class="form-row">
                        <div class="form-group col">
                            <input type="text" class="form-control" @bind="registroForm.fechaNacimiento" placeholder="Fecha Nacimiento (yyyy/MM/dd)">
                        </div>
                        <div class="form-group col">
                            <input type="text" class="form-control" @bind="registroForm.telefono" placeholder="Teléfono">
                        </div>
                    </div>
                    <div class="form-group">
                        <input type="email" class="form-control" @bind="registroForm.email" placeholder="Correo electrónico">
                    </div>
                    <div class="d-flex justify-content-between">
                        <p class="text-secondary align-self-center m-0">¿Ya tienes cuenta?  <a href="/login">Ingresar</a></p>
                        <button type="submit" class="btn btn-primary">Registrarse</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private RegistroForm registroForm = new RegistroForm();

    public async Task encargadoRegistro()
    {
        var confirmacion = await js.Confirm("¿Estas seguro/a?", "Verifíque bien los datos ingresados.", IJSExtensions.TipoMensajeSweetAlert.question);
        if (!confirmacion)
        {
            return;
        }

        var responseMessage = await Http.GetAsync("http://localhost:8080/usuario/nombreUsuario/" + registroForm.nombreUsuario);
        if (responseMessage == null)
        {
            await js.MostrarMensaje("Ups!", "Nombre de usuario ya existente.", IJSExtensions.TipoMensajeSweetAlert.warning);
            return;
        }

        registroForm.rol = "1";

        var requestMessage = new HttpRequestMessage()
        {
            Method = new HttpMethod("POST"),
            RequestUri = new Uri("http://localhost:8080/usuario"),
            Content = new  StringContent(JsonConvert.SerializeObject(registroForm))
        };

        requestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
        requestMessage.Content.Headers.TryAddWithoutValidation("x-custom-header", "value");

        var respuesta = await Http.SendAsync(requestMessage);

        var respuestaContenido = await respuesta.Content.ReadAsStringAsync();
        var nuevoUsuario = JsonConvert.DeserializeObject<Usuario>(respuestaContenido);

        if (nuevoUsuario == null)
        {
            await js.MostrarMensaje("Error", "Al parecer hay problemas.", IJSExtensions.TipoMensajeSweetAlert.error);
            return;
        }

        await js.SetInLocalStorage("usuario", respuestaContenido);

        Navigation.NavigateTo("/home");
    }
}
